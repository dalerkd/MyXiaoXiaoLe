##我的消消乐
###设计机制
X*Y的立方体哟
9*9

- 存储方式：
有标号的东西，eg:二维数组
- 基本物理特性：
下坠,方块下方为空，方块下坠

- 进入机制：
暂为上方进入，当上方为空时

- 检查与消除方式：
三个same消除，进入物理特性检查。

- 交换方式
只有相临才能交互，

##在完成过程中才遇到的BUG

1. 消零错位			忘记写条件
2. 没有break 成功	没有穿透
3. 条件写反
4. 少一种情况
5. 发现了一个情况：
9,3
9,4
9,5
出现三个空的情况。
可能原因：
	1. 重力引擎故障
	2. 进入重力引擎的逻辑问题(没有进入)

排除了2.,开始1.
初步判定next_pai逻辑少一。
6. 改正时，理解方向反了
7. 发现边界问题一次>0>=0
8. 修改6时，使用了不变的变量，导致逻辑问题
即没有理解原意思。

9. 堆溢出
10. 发现结果没有被消除逻辑搞定。
_MAP[lp*m_map_x+hh];
行列不小心搞反了，
发现两处BUG：
 - 获取周围值有问题
 - 即使获取对了，消除逻辑也飞了。
  1. 获取周围d和e搞反，获取的值反了
  2. 某一部分行列搞反导致消除逻辑境像

11. 为了方便解决10号问题，优化速度引入BUG：x=y+1,在其他逻辑替代使写成：
x=y-1.出现死循环，发现出现负数，找到原因。
优化效果非常明显：超过50倍。

12. 搞反了第一和第二的值，来回赋值。

一处合法值验证帮我发现了一半的错误。
有问题就抛异常。将问题定在发生的时刻。
幸亏没有出现偶发性问题。
不然现有的捕获机制还是不给力。
开放的过程是优化的过程。
调试的过程真是。。。。。。

并没有编写测试代码，就导致我们找错误看运气。
复原错误也不太可能。因为随机生成的数据的引入。


开始设计时间：2017年8月19日星期六 10:57
完成测试时间：2017年8月20日星期日 16:05
##后言
设计这款程序本来是打算给家人当教程的。

开始的时候，相对于两年前，我认为自己有信心设计一个不会指针漫天飞的程序。
确实排除BUG占用了起码一半时间。这也是第一次清晰的记录完整项目小BUG的改进全过程。
经历了优化的过程，速度提升100倍。
代码量700+。。。。。。

##未来
这个程序未来是一个消消乐辅助，能帮助我们看清有哪些消的可能。

相当于所有相临的Block互换，并调用检查，检查方法已经完成了，所以后期开发会很容易。

此外和上面的功能一样的是，正常消消乐应该有一个所有块不能消除情况下，要打乱块。而这个功能没有做。
